// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "common.cginc"
#include "noise.cginc"

// Input
StructuredBuffer<Noise> _NoisesBuffer;

float calcNoiseAtIndex(int index, float3 coord) {
    return calcNoise(_NoisesBuffer[index], coord);
}

float calcHeightNoise(float3 coord) { return calcNoiseAtIndex(0, coord); }
float calcRockColorNoise(float3 coord) { return calcNoiseAtIndex(1, coord); }
float calcGrassNoise(float3 coord) { return calcNoiseAtIndex(2, coord); }
float calcStoneNoise(float3 coord) { return calcNoiseAtIndex(3, coord); }
float calcEdgeNoise(float3 coord) { return calcNoiseAtIndex(4, coord); }

float _MaxHeight;
int _WaterLevel;

// Height
float _HeightCurve[67];
float _HillHeight;
float _GroundHeight;

// Rock
float4 _RockColorGradient[33];

// Grass
float _GrassNormalCurve[67];
float _GrassHeightCurve[67];
float _GrassValue;
float4 _GrassColorGradient[33];

// Stone
float _StoneHeightCurve[67];
float _StoneValue;
float4 _StoneColorGradient[33];

// Edge
float _EdgeHeightCurve[67];
float _EdgeDistance;
int _UseEdges;

// Output
RWStructuredBuffer<float> _VoxelBuffer;
RWStructuredBuffer<float4> _ColorBuffer;

int _Size;
float3 _Origin;
int _DataSize;
int _Resolution;
int4 _Bounds;

int getIndex(int3 coord) {
    int dataSize = _DataSize;
    return (coord.x * dataSize * dataSize) + (coord.y * dataSize) + coord.z;
}

float readBuffer(StructuredBuffer<float> buffer, int3 coord) {
    int index = coord.x * _DataSize * _DataSize + coord.y * _DataSize + coord.z;
    return buffer[index];
}

float getVoxel(int3 coord) {
    int index = getIndex(coord);
    float v = _VoxelBuffer[index];
    return v;
}

float getGrassDot(int i, int j, int k) {
    float v = getVoxel(int3(i, j, k));

    if (v <= 0) {
        return 99;
    }
    
    float v1 = getVoxel(int3(i + 1, j, k));
    float v2 = getVoxel(int3(i - 1, j, k));
    float v3 = getVoxel(int3(i, j + 1, k));
    float v4 = getVoxel(int3(i, j - 1, k));
    float v5 = getVoxel(int3(i, j, k + 1));
    float v6 = getVoxel(int3(i, j, k - 1));
    
    if (v1 > 0 && v2 > 0 && v3 > 0 && v4 > 0 && v5 > 0 && v6 > 0) {
        return 99;
    }

    float3 d =  float3(1, 0, 0) * v1 +
    float3(-1, 0, 0) * v2   +
    float3(0, 1, 0) * v3    +
    float3(0, -1, 0) * v4   +
    float3(0, 0, 1) * v5    +
    float3(0, 0, -1) * v6;
    
    float3 up = float3(0, 1, 0);
    return clamp(dot(-normalize(d), up), 0, 1);
}

float calcGrass(int3 worldCoord) {
    float heightRatio = worldCoord.y / _MaxHeight;
    int absY = worldCoord.y;
    int3 coord = worldCoord - _Origin;
    if (absY < _WaterLevel) {
        return 0;
    }
    
    float normal = getGrassDot(coord.x, coord.y, coord.z);
    
    if (normal == 99) {
        return 0;
    }

    float normalValue = sampleValueGradient64(_GrassNormalCurve, normal);
    float heightValue = sampleValueGradient64(_GrassHeightCurve, heightRatio);

    return normalValue * heightValue - _GrassValue;
}

float calcStone(int3 worldCoord) {
    float heightRatio = worldCoord.y / _MaxHeight;
    float heightValue = sampleValueGradient64(_StoneHeightCurve, heightRatio);
    float v = calcStoneNoise(worldCoord);
    return v * heightValue - 0.3;
}

float calcDistanceFromEdge(int3 worldCoord) {
    return min(
        min(worldCoord.x - _Bounds[0] - 1, worldCoord.z - _Bounds[1] - 1), 
        min(_Bounds[2] - worldCoord.x, _Bounds[3] - worldCoord.z));
}

float calcValue(int3 coord) {
    int3 worldCoord = coord + _Origin;
    float relY = worldCoord.y - _GroundHeight;
    float gradient = -relY / _HillHeight;

    if (_UseEdges != 0) {
        float distanceFromEdge = calcDistanceFromEdge(worldCoord);
        float edgeRatio = clamp(1 - distanceFromEdge / _EdgeDistance, 0, 1);
        float edgeNoise = calcEdgeNoise(worldCoord);
        float edgeValue = sampleValueGradient64(_EdgeHeightCurve, edgeRatio) * clamp(edgeNoise, 0, 1);
        gradient += edgeValue;
    }

    float heightNoise = calcHeightNoise(worldCoord);
    float heightCurveValue = sampleValueGradient64(_HeightCurve, heightNoise);
    return heightCurveValue + gradient;
}

float4 calcColor(int3 worldCoord) {
    float stone = calcStone(worldCoord);
    float heightRatio = worldCoord.y / _MaxHeight;

    if (stone > 0) {
        return sampleColorGradient32(_StoneColorGradient, stone);
    }

    float grass = calcGrass(worldCoord);
    if (grass > 0) {
        return sampleColorGradient32(_GrassColorGradient, grass);
    }

    float rockColorNoise = calcRockColorNoise(worldCoord);
    return sampleColorGradient32(_RockColorGradient, heightRatio + rockColorNoise);
}

[numthreads(8, 8, 4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int dataSize = _DataSize;
    if (id.x >= dataSize || id.y >= dataSize || id.z >= dataSize) {
        return;
    }

    int3 coord = int3(id.x, id.y, id.z);
    int3 worldCoord = coord + _Origin;
    float heightRatio = worldCoord.y / _MaxHeight;

    int index = getIndex(coord);

    _VoxelBuffer[index] = calcValue(coord);
    _ColorBuffer[index] = calcColor(worldCoord);
}
