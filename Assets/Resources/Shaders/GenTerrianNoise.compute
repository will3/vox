#pragma kernel CSMain

struct GenTerrianNoise {
    float height;
    float rockColor;
    float grass;
    float river;
    float stone;
    float stone2;
};

float sampleValue(StructuredBuffer<float> values, StructuredBuffer<float> keys, int size, float ratio) {
    if (ratio < keys[0]) {
        ratio = keys[0];
    }
    if (ratio > keys[size - 1]) {
        ratio = keys[size - 1];
    }

    for (int i = 0; i < size - 1; i++) {
        float ra = keys[i];
        float rb = keys[i + 1];

        if (ratio >= ra && ratio <= rb) {
            float r = (ratio - ra) / (rb - ra);
            float va = values[i];
            float vb = values[i + 1];
            return va + (vb - va) * r;
        }
    }
    return 0;
}

StructuredBuffer<float> _HeightBuffer;
StructuredBuffer<float> _RockColorBuffer;
StructuredBuffer<float> _RiverBuffer;
StructuredBuffer<float> _GrassBuffer;
StructuredBuffer<float> _StoneBuffer;
StructuredBuffer<float> _StoneBuffer2;

// Height
StructuredBuffer<float> _HeightValues;
StructuredBuffer<float> _HeightKeys;
int _HeightSize;

RWStructuredBuffer<GenTerrianNoise> _NoiseBuffer;

int _DataSize;

int getIndex(int x, int y, int z) {
    int dataSize = _DataSize;
    return x * dataSize * dataSize + y * dataSize + z;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int dataSize = _DataSize;
    if (id.x >= dataSize || id.y >= dataSize || id.z >= dataSize) {
        return;
    }
    
    int index = getIndex(id.x, id.y, id.z);
    
    GenTerrianNoise t;

    float height = _HeightBuffer[index];
    height = sampleValue(_HeightValues, _HeightKeys, _HeightSize, height);
    t.height = height;
    
    t.rockColor = _RockColorBuffer[index];
    t.river = _RiverBuffer[index];
    t.grass = _GrassBuffer[index];
    t.stone = _StoneBuffer[index];
    t.stone2 = _StoneBuffer2[index];
    
    _NoiseBuffer[index] = t;
}