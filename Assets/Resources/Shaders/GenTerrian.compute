// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

float _HillHeight;
float _PlainHeight;
float4 _RockColor;
float4 _SoilColor;
float4 _WaterColor;

StructuredBuffer<float> _CanyonBuffer;
StructuredBuffer<float> _HeightBuffer;
StructuredBuffer<float> _RockBuffer;
StructuredBuffer<float> _ScultBuffer;

RWStructuredBuffer<float> _VoxelBuffer;
RWStructuredBuffer<float4> _ColorBuffer;
int _Size;
float3 _Origin;

int getIndex(int3 coord) {
    int dataSize = _Size + 3;
    return (coord.x * dataSize * dataSize) + (coord.y * dataSize) + coord.z;
}

[numthreads(8, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int dataSize = _Size + 3;
    if (id.x >= dataSize || id.y >= dataSize || id.z >= dataSize) {
        return;
    }

    int3 coord = int3(id.x, id.y, id.z);
    int index = getIndex(coord);

    float biome = _CanyonBuffer[index];
    float terrainHeight;

    if (biome < -0.1) {
        terrainHeight = _PlainHeight;
    } else if (biome >= -0.1 && biome < 0.1) {
        float ratio = (biome + 0.1) / 0.2;
        terrainHeight = _PlainHeight + (_HillHeight - _PlainHeight) * ratio;
    } else {
        terrainHeight = _HillHeight;
    }

    float absY = coord.y + _Origin.y;
    float gradient = (1.0 - (absY / terrainHeight)) - 0.5;
    float height = _HeightBuffer[index];
    float value = height + gradient;
    float sculpt = _ScultBuffer[index];
    if (sculpt > 0) {
        value -= sculpt;
    }

    float rock = _RockBuffer[index] - gradient * 0.5;

    bool isRock = rock > 0;

    _VoxelBuffer[index] = value;

    if (isRock) {
        _ColorBuffer[index] = _RockColor;
    } else {
        _ColorBuffer[index] = _SoilColor;
    }

    _ColorBuffer[index] = _RockColor;
}
