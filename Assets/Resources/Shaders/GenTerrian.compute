// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "common.cginc"

struct GenTerrianNoise {
    float height;
    float rockColor;
    float grass;
};

struct Biome {
    
};

StructuredBuffer<GenTerrianNoise> _NoiseBuffer;

float _MaxHeight;
int _WaterLevel;


float _HillHeight;
float _GroundHeight;
float4 _WaterColor;

// Rock color
float4 _RockGradient[8];
float _RockGradientIntervals[8];
float _RockGradientBanding;
int _RockGradientSize;

// Grass color
float4 _GrassGradient[8];
float _GrassGradientIntervals[8];
float _GrassGradientBanding;
int _GrassGradientSize;

// Grass Normal Filter
float _GrassNormalValues[8];
float _GrassNormalKeys[8];
int _GrassNormalSize;

// Grass Height Filter
float _GrassHeightValues[8];
float _GrassHeightKeys[8];
int _GrassHeightSize;

// Height
float _HeightValues[8];
float _HeightKeys[8];
int _HeightSize;

// Output
RWStructuredBuffer<float> _VoxelBuffer;
RWStructuredBuffer<float4> _ColorBuffer;

int _Size;
float3 _Origin;
int _DataSize;
int _Resolution;

int getIndex(int3 coord) {
    int dataSize = _DataSize;
    return (coord.x * dataSize * dataSize) + (coord.y * dataSize) + coord.z;
}

float readBuffer(StructuredBuffer<float> buffer, int3 coord) {
    int index = coord.x * _DataSize * _DataSize + coord.y * _DataSize + coord.z;
    return buffer[index];
}

float getVoxel(int3 coord) {
    int index = getIndex(coord);
    float v = _VoxelBuffer[index];
    return v;
}

float getGrassDot(int i, int j, int k) {
    float v = getVoxel(int3(i, j, k));
    if (v <= 0) {
        return 99;
    }

    float v3 = getVoxel(int3(i, j + 1, k));

    if (v3 > 0) {
        return 99;
    }

    float v1 = getVoxel(int3(i + 1, j, k));
    float v2 = getVoxel(int3(i - 1, j, k));
    float v4 = getVoxel(int3(i, j - 1, k));
    float v5 = getVoxel(int3(i, j, k + 1));
    float v6 = getVoxel(int3(i, j, k - 1));

    float3 d =  float3(1, 0, 0) * v1 +
    float3(-1, 0, 0) * v2   +
    float3(0, 1, 0) * v3    +
    float3(0, -1, 0) * v4   +
    float3(0, 0, 1) * v5    +
    float3(0, 0, -1) * v6;
    
    float3 up = float3(0, 1, 0);
    return dot(-normalize(d), up);
}

float getGrass(int3 coord, float heightRatio, int absY, GenTerrianNoise noise) {
    if (absY < _WaterLevel + _GroundHeight) {
        return 0;
    }
    
    float normal = getGrassDot(coord.x, coord.y, coord.z);
    if (normal == 99) {
        return 0;
    }
    
    float normalValue = sampleValue(_GrassNormalValues, _GrassNormalKeys, _GrassNormalSize, normal);
    
    float heightValue = sampleValue(_GrassHeightValues, _GrassHeightKeys, _GrassHeightSize, heightRatio);

    float value = normalValue + heightValue - 1.2;

    return value;
}

[numthreads(8, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int dataSize = _DataSize;
    if (id.x >= dataSize || id.y >= dataSize || id.z >= dataSize) {
        return;
    }

    int3 coord = int3(id.x, id.y, id.z);
    int index = getIndex(coord);
    GenTerrianNoise noise = _NoiseBuffer[index];
    
    float absY = coord.y + _Origin.y;
    float relY = absY - _GroundHeight;
    float gradient = -relY / _HillHeight;
    float height = sampleValue(_HeightValues, _HeightKeys, _HeightSize, noise.height);
    
    float value = height + gradient;
    _VoxelBuffer[index] = value;

    float heightRatio = relY / _MaxHeight;
    float4 rockColor = sampleColor(_RockGradient, _RockGradientIntervals, _RockGradientSize, _RockGradientBanding, heightRatio + noise.rockColor);
    float grass = getGrass(coord, heightRatio, absY, noise);
    float4 grassColor = sampleColor(_GrassGradient, _GrassGradientIntervals, _GrassGradientSize, _GrassGradientBanding, grass);
    
    //
      //  type = typeGrass;
    //} else {
      //  type = typeRock;
    //}
    // type = typeRock;
    
    if (grass > 0) {
        _ColorBuffer[index] = grassColor;
    } else {
        _ColorBuffer[index] = rockColor;
    }
    
    //if (type == typeGrass) {
        // 
    //} else if (type == typeRock) {
      //  
    //}
    // _ColorBuffer[index] = rockColor;
}
